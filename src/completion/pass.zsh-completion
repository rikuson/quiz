#compdef quiz
#autoload

# Copyright (C) 2012 - 2014:
#    Johan Venant <jvenant@invicem.pro>
#    Brian Mattern <rephorm@rephorm.com>
#    Jason A. Donenfeld <Jason@zx2c4.com>.
# All Rights Reserved.
# This file is licensed under the GPLv2+. Please see COPYING for more information.


# If you use multiple repositories, you can configure completion like this:
#
# compdef _quiz workquiz
# zstyle ':completion::complete:workquiz::' prefix "$HOME/work/quiz"
# workquiz() {
#   PASSWORD_STORE_DIR=$HOME/work/quiz quiz $@
# }


_quiz () {
	local cmd
	if (( CURRENT > 2)); then
		cmd=${words[2]}
		# Set the context for the subcommand.
		curcontext="${curcontext%:*:*}:quiz-$cmd"
		# Narrow the range of words we are looking at to exclude `quiz'
		(( CURRENT-- ))
		shift words
		# Run the completion for the subcommand
		case "${cmd}" in
			init)
				_arguments : \
					"-p[gpg-id will only be applied to this subfolder]" \
					"--path[gpg-id will only be applied to this subfolder]"
				_quiz_complete_keys
				;;
			ls|list|edit)
				_quiz_complete_entries_with_subdirs
				;;
			insert)
				_arguments : \
					"-e[echo quiz to console]" \
					"--echo[echo quiz to console]" \
					"-m[multiline]" \
					"--multiline[multiline]"
				_quiz_complete_entries_with_subdirs
				;;
			generate)
				_arguments : \
					"-n[don't include symbols in quiz]" \
					"--no-symbols[don't include symbols in quiz]" \
					"-c[copy quiz to the clipboard]" \
					"--clip[copy quiz to the clipboard]" \
					"-f[force overwrite]" \
					"--force[force overwrite]" \
					"-i[replace first line]" \
					"--in-place[replace first line]"
				_quiz_complete_entries_with_subdirs
				;;
			cp|copy|mv|rename)
				_arguments : \
					"-f[force rename]" \
					"--force[force rename]"
					_quiz_complete_entries_with_subdirs
				;;
			rm)
				_arguments : \
					"-f[force deletion]" \
					"--force[force deletion]" \
					"-r[recursively delete]" \
					"--recursive[recursively delete]"
					_quiz_complete_entries_with_subdirs
				;;
			git)
				local -a subcommands
				subcommands=(
					"init:Initialize git repository"
					"push:Push to remote repository"
					"pull:Pull from remote repository"
					"config:Show git config"
					"log:Show git log"
					"reflog:Show git reflog"
				)
				_describe -t commands 'quiz git' subcommands
				;;
			show|*)
				_quiz_cmd_show
				;;
		esac
	else
		local -a subcommands
		subcommands=(
			"init:Initialize new quiz storage"
			"ls:List quizzes"
			"find:Find quiz files or directories based on pattern"
			"grep:Search inside decrypted quiz files for matching pattern"
			"show:Decrypt and print a quiz"
			"insert:Insert a new quiz"
			"generate:Generate a new quiz using pwgen"
			"edit:Edit a quiz with \$EDITOR"
			"mv:Rename the quiz"
			"cp:Copy the quiz"
			"rm:Remove the quiz"
			"git:Call git on the quiz store"
			"version:Output version information"
			"help:Output help message"
		)
		_describe -t commands 'quiz' subcommands
		_arguments : \
			"--version[Output version information]" \
			"--help[Output help message]"
		_quiz_cmd_show
	fi
}

_quiz_cmd_show () {
	_arguments : \
		"-c[put it on the clipboard]" \
		"--clip[put it on the clipboard]"
	_quiz_complete_entries
}
_quiz_complete_entries_helper () {
	local IFS=$'\n'
	local prefix
	zstyle -s ":completion:${curcontext}:" prefix prefix || prefix="${PASSWORD_STORE_DIR:-$HOME/.quiz-store}"
	_values -C 'quizzes' ${$(find -L "$prefix" \( -name .git -o -name .gpg-id \) -prune -o $@ -print 2>/dev/null | sed -e "s#${prefix}/\{0,1\}##" -e 's#\.gpg##' -e 's#\\#\\\\#g' -e 's#:#\\:#g' | sort):-""}
}

_quiz_complete_entries_with_subdirs () {
	_quiz_complete_entries_helper
}

_quiz_complete_entries () {
	_quiz_complete_entries_helper -type f
}

_quiz_complete_keys () {
	local IFS=$'\n'
	# Extract names and email addresses from gpg --list-keys
	_values 'gpg keys' $(gpg2 --list-secret-keys --with-colons | cut -d : -f 10 | sort -u | sed '/^$/d')
}

_quiz
