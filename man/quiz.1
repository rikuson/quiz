.TH QUIZ 1 "2022 October 2" "Riku Takeuchi" "Quiz"

.SH NAME
quiz - flash cards application

.SH SYNOPSIS
.B quiz
[ 
.I COMMAND
] [ 
.I OPTIONS
]... [ 
.I ARGS
]...

.SH DESCRIPTION

.B quiz 
is flash cards application which helps you learn new things.
The
.B quiz
utility provides a series of commands for manipulating the quiz store,
allowing the user to add, remove, edit, synchronize, and manipulate
quizzes.

If no COMMAND is specified, COMMAND defaults to either
.B show
or
.BR ls ,
depending on the type of specifier in ARGS. Alternatively, if \fIQUIZ_STORE_ENABLE_EXTENSIONS\fP
is set to "true", and the file \fI.extensions/COMMAND.bash\fP exists inside the
quiz store and is executable, then it is sourced into the environment,
passing any arguments and environment variables. Extensions existing in a
system-wide directory, only installable by the administrator, are always enabled.

Otherwise COMMAND must be one of the valid commands listed below.

Several of the commands below rely on or provide additional functionality if
the quiz store directory is also a git repository. If the quiz store
directory is a git repository, all quiz store modification commands will
cause a corresponding git commit. Sub-directories may be separate nested git
repositories, and quiz will use the inner-most directory relative to the
current quiz. See the \fIEXTENDED GIT EXAMPLE\fP section for a detailed
description using \fBinit\fP and
.BR git (1).

The \fBinit\fP command must be run before other commands in order to initialize
the quiz store.

There is a corresponding bash completion script for use with tab completing
quiz names in
.BR bash (1).

.SH COMMANDS

.TP
\fBinit\fP
Initialize new quiz storage.
.TP
\fBls\fP \fIsubfolder\fP
List names of quizzes inside the tree at
.I subfolder
by using the
.BR tree (1)
program. This command is alternatively named \fBlist\fP.
.TP
\fBgrep\fP [\fIGREPOPTIONS\fP] \fIsearch-string\fP
Searches inside each decrypted quiz file for \fIsearch-string\fP, and displays line
containing matched string along with filename. Uses
.BR grep (1)
for matching. \fIGREPOPTIONS\fP are passed to
.BR grep (1)
as-is. (Note: the \fIGREP_OPTIONS\fP environment variable functions as well.)
.TP
\fBfind\fP \fIquiz-names\fP...
List names of quizzes inside the tree that match \fIquiz-names\fP by using the
.BR tree (1)
program. This command is alternatively named \fBsearch\fP.
.TP
\fBshow\fP \fIquiz-name\fP
Decrypt and print a quiz named \fIquiz-name\fP.
.TP
\fBadd\fP [ \fI--multiline\fP, \fI-m\fP ] [ \fI--force\fP, \fI-f\fP ] \fIquiz-name\fP
Insert a new quiz into the quiz store called \fIquiz-name\fP. This will
read the new quiz from standard in. If \fI--multiline\fP or \fI-m\fP is specified, lines
will be read until EOF or Ctrl+D is reached. Otherwise, only a single line from standard
in is read. Prompt before overwriting an existing quiz, unless \fI--force\fP or \fI-f\fP
is specified. This command is alternatively named \fBinsert\fP.
.TP
\fBedit\fP \fIquiz-name\fP
Insert a new quiz or edit an existing quiz using the default text editor specified
by the environment variable \fIEDITOR\fP or using
.BR vi (1)
as a fallback. This mode makes use of temporary files for editing, but care is taken to
ensure that temporary files are created in \fI/dev/shm\fP in order to avoid writing to
difficult-to-erase disk sectors. If \fI/dev/shm\fP is not accessible, fallback to
the ordinary \fITMPDIR\fP location, and print a warning.
.TP
\fBrm\fP [ \fI--recursive\fP, \fI-r\fP ] [ \fI--force\fP, \fI-f\fP ] \fIquiz-name\fP
Remove the quiz named \fIquiz-name\fP from the quiz store. This command is
alternatively named \fBremove\fP or \fBdelete\fP. If \fI--recursive\fP or \fI-r\fP
is specified, delete quiz-name recursively if it is a directory. If \fI--force\fP
or \fI-f\fP is specified, do not interactively prompt before removal.
.TP
\fBmv\fP [ \fI--force\fP, \fI-f\fP ] \fIold-path\fP \fInew-path\fP
Renames the quiz or directory named \fIold-path\fP to \fInew-path\fP. This
command is alternatively named \fBrename\fP. If \fI--force\fP is specified,
silently overwrite \fInew-path\fP if it exists. If \fInew-path\fP ends in a
trailing \fI/\fP, it is always treated as a directory.
.TP
\fBcp\fP [ \fI--force\fP, \fI-f\fP ] \fIold-path\fP \fInew-path\fP
Copies the quiz or directory named \fIold-path\fP to \fInew-path\fP. This
command is alternatively named \fBcopy\fP. If \fI--force\fP is specified,
silently overwrite \fInew-path\fP if it exists. If \fInew-path\fP ends in a
trailing \fI/\fP, it is always treated as a directory.
.TP
\fBgit\fP \fIgit-command-args\fP...
If the quiz store is a git repository, quiz \fIgit-command-args\fP as arguments to
.BR git (1)
using the quiz store as the git repository. If \fIgit-command-args\fP is \fBinit\fP,
in addition to initializing the git repository, add the current contents of the quiz
store to the repository in an initial commit. If the git config key \fIquiz.signcommits\fP
is set to \fItrue\fP, then all commits will be signed using \fIuser.signingkey\fP or the
default git signing key. This config key may be turned on using:
.B `quiz git config --bool --add quiz.signcommits true`
.TP
\fBhelp\fP
Show usage message.
.TP
\fBversion\fP
Show version information.

.SH SIMPLE EXAMPLES

.TP
Initialize quiz store
.B $ quiz init
.br
mkdir: created directory \[u2018]/home/rikuson/.quiz-store\[u2019] 
.br
Quiz store initialized
.TP
Start quiz
.B $ quiz
.br
Q) What is the output of this Rust program?
.br
.br
```rust
.br
macro_rules! m {
.br
    ($($s:stmt)*) => {
.br
        $(
.br
            { stringify!($s); 1 }
.br
        )<<*
.br
    };
.br
}
.br
.br
fn main() {
.br
    print!(
.br
        "{}{}{}",
.br
        m! { return || true },
.br
        m! { (return) || true },
.br
        m! { {return} || true },
.br
    );
.br
}
.br
```
.br
A) _
.TP
List existing quizzes in store
.B $ quiz  ls
.br
Quiz Store
.br
\[u251C]\[u2500]\[u2500] rust
.br
\[u2502]   \[u251C]\[u2500]\[u2500] 001-macro-count-statements
.br
\[u2502]   \[u2514]\[u2500]\[u2500] 002-bitand-or-reference
.br
\[u251C]\[u2500]\[u2500] deep-learning
.br
\[u2502]   \[u251C]\[u2500]\[u2500] 001-logical-gate
.br
\[u2502]   \[u2514]\[u2500]\[u2500] 002-segmentation
.br
\[u2514]\[u2500]\[u2500] aws-certification
.br
    \[u251C]\[u2500]\[u2500] 001-auto-scaling
.br
    \[u251C]\[u2500]\[u2500] 002-s3-object
.br
    \[u2514]\[u2500]\[u2500] 003-cloud-front
.br
.TP
Find existing quizzes in store that match 002
.B $ quiz find 002
.br
Search Terms: 002
.br
\[u251C]\[u2500]\[u2500] rust 
.br
\[u2502]   \[u2514]\[u2500]\[u2500] 002-segmentation
.br
\[u251C]\[u2500]\[u2500] deep-learning
.br
\[u2502]   \[u2514]\[u2500]\[u2500] 002-segmentation
.br
\[u2514]\[u2500]\[u2500] aws-certification
.br
    \[u251C]\[u2500]\[u2500] 002-s3-object
.br

.br
Alternatively, "\fBquiz search 002\fP".
.TP
Show existing quiz
.B $ quiz show rust/001-macro-count-statements
.br
question: |
.br
  What is the output of this Rust program?
.br
  ```rust
.br
  macro_rules! m {
.br
      ($($s:stmt)*) => {
.br
          $(
.br
              { stringify!($s); 1 }
.br
          )<<*
.br
      };
.br
  }
.br
.br
  fn main() {
.br
      print!(
.br
          "{}{}{}",
.br
          m! { return || true },
.br
          m! { (return) || true },
.br
          m! { {return} || true },
.br
      );
.br
  }
.br
  ```
.br
answer: 112
.TP
Add quiz to store
.B $ quiz add whoami
.br
Enter question for whoami: Who am I?
.br
Enter answer for whoami: rikuson
.TP
Add multiline quiz to store 
.B $ quiz add -m rust/001-macro-count-statements
.br
Enter quiz of rust/001-macro-count-statements and press Ctrl+D when finished
.br
 
.br
What is the output of this Rust program?
.br

.br
```rust
.br
macro_rules! m {
.br
    ($($s:stmt)*) => {
.br
        $(
.br
            { stringify!($s); 1 }
.br
        )<<*
.br
    };
.br
}
.br

.br
fn main() {
.br
    print!(
.br
        "{}{}{}",
.br
        m! { return || true },
.br
        m! { (return) || true },
.br
        m! { {return} || true },
.br
    );
.br
}
.br
```
.br
^D 
.TP
Remove quiz from store
.B $ quiz rm rust/001-macro-count-statements
.br
rm: remove regular file \[u2018]/home/rikuson/.quiz-store/rust/001-macro-count-statements.yml\[u2019]? y
.br
removed \[u2018]/home/rikuson/.quiz-store/rust/001-macro-count-statements.yml\[u2019]

.SH EXTENDED GIT EXAMPLE
Here, we initialize new quiz store, create a git repository, and then manipulate and sync quizzes. Make note of the arguments to the first call of \fBquiz git push\fP; consult
.BR git-push (1)
for more information.

.B $ quiz init
.br
mkdir: created directory \[u2018]/home/rikuson/.quiz-store\[u2019] 
.br
Quiz store initialized

.B $ quiz git init 
.br
Initialized empty Git repository in /home/rikuson/.quiz-store/.git/

.B $ quiz git remote add origin git@github.com:rikuson/quiz-store.git

.B $ quiz add whoami
.br
Enter question for whoami: Who am I?
.br
Enter answer for whoami: rikuson
.br
1 file changed, 0 insertions(+), 0 deletions(-)
.br
create mode 100644 whoami.yml

.B $ quiz git push -u --all
.br
Counting objects: 4, done. 
.br
Delta compression using up to 2 threads. 
.br
Compressing objects: 100% (3/3), done. 
.br
Writing objects: 100% (4/4), 921 bytes, done. 
.br
Total 4 (delta 0), reused 0 (delta 0) 
.br
To git@github.com:rikuson/quiz-store.git
.br
* [new branch]      master -> master 
.br
Branch master set up to track remote branch master from origin. 

.B $ quiz add whoareyou
.br
Enter question for whoareyou: Who are you?
.br
Enter answer for whoareyou: anonymous
.br
[master b9b6746] Added given quiz for whoareyou to store.
.br
1 file changed, 0 insertions(+), 0 deletions(-) 
.br
create mode 100644 whoareyou.yml

.B $ quiz rm whoami
.br
rm: remove regular file \[u2018]/home/rikuson/.quiz-store/whoami.yml\[u2019]? y
.br
removed \[u2018]/home/rikuson/.quiz-store/whoami.yml\[u2019]
.br
rm 'whoami.yml'
.br
[master 288b379] Removed whoami from store.
.br
1 file changed, 0 insertions(+), 0 deletions(-) 
.br
delete mode 100644 whoami.yml

.B $ quiz git push
.br
Counting objects: 9, done. 
.br
Delta compression using up to 2 threads. 
.br
Compressing objects: 100% (5/5), done. 
.br
Writing objects: 100% (7/7), 1.25 KiB, done. 
.br
Total 7 (delta 0), reused 0 (delta 0) 
.br
To git@github.com:rikuson/quiz-store.git

.SH FILES

.TP
.B ~/.quiz-store
The default quiz storage directory.
.TP
.B ~/.quiz-store/.extensions
The directory containing extension files.

.SH ENVIRONMENT VARIABLES

.TP
.I QUIZ_STORE_DIR
Overrides the default quiz storage directory.
.TP
.I QUIZ_STORE_UMASK
Sets the umask of all files modified by quiz, by default \fI077\fP.
.TP
.I QUIZ_STORE_ENABLE_EXTENSIONS
This environment variable must be set to "true" for extensions to be enabled.
.TP
.I QUIZ_STORE_EXTENSIONS_DIR
The location to look for executable extension files, by default
\fIQUIZ_STORE_DIR/.extensions\fP.
.TP
.I EDITOR
The location of the text editor used by \fBedit\fP.
.SH SEE ALSO
.BR tr (1),
.BR git (1),

.SH AUTHOR
.B quiz
was written by
Riku Takeuchi and
.MT Jason@zx2c4.com
Jason A. Donenfeld
.ME .
For updates and more information, a project page is available on the
.UR https://github.com/rikuson/quiz/
World Wide Web
.UE .

.SH COPYING
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
